What happens when you initialize a repository? Why do you need to do it?

Initializing a repository sets it up as a git repository, but you still need
to make your initial commit.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area contains the files from the working directory that you want to commit to the git repository. It offers the ability to choose a subset a files from the working directory to commit, rather than committing the entire directory all at once.


How can you use the staging area to make sure you have one commit per logical change?

You can see which changes have been made but not yet committed -- e.g. you can compare files in the staging area to those in the most recent commit.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches could be helpful if you wanted to create different working versions of a project, each with different features. Making changes on one branch won't affect other versions on different branches.


How do the diagrams help you visualize the branch structure?

The diagrams display chronologically different branch creations or offshoots. You can easily see from the diagram when certain branches diverged from other branches.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together combines changes made to both branches and allows you to access commits from either branch. We represent the merge in a certain fashion to show what changes accrued over the course of time in different branches.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros of automatic merging are that the user doesn't have to spend as much time deciding which changes to keep in the merged version (because git will take care of the non-ambiguous cases). Cons would be that the user does still have to disambiguate in certain cases which changes to keep in the final, merged version (because git is conservative in its decision-making process). Overall, it probably is more efficient to use git, especially for longer code, to automatically merge files.
